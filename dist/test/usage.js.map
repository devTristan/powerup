{"version":3,"sources":["../../src/test/usage.js"],"names":[],"mappings":";;;;;;;;;;;;;;wBAAiB,WAAW;;;;gBACR,IAAI;;;;AAExB,2BAAK,oBAAoB,EAAE,oBAAgB,CAAC;MACtC,GAAG;;;;AAAH,WAAG,GAAG,mBAAQ;AAChB,gBAAM,EAAE,CAAC,WAAW,CAAC;SACtB,EAAE;4CAAI,OAAO;AAAP,mBAAO;;;iBAAK,OAAO,CAAC,MAAM,CAAC,UAAC,CAAC,EAAE,CAAC;mBAAK,CAAC,GAAG,CAAC;WAAA,CAAC;SAAA,CAAC;;AAEnD,SAAC,CAAC,KAAK,CAAC,OAAO,GAAG,EAAE,UAAU,EAAE,0BAA0B,CAAC,CAAA;AAC3D,SAAC,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,WAAW,CAAC,yCAAuC,CAAA;AAC5E,SAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,oBAAoB,CAAC,CAAA;AACxC,SAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,IAAI,EAAE,kCAAkC,CAAC,CAAA;AACpE,SAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,0BAA0B,CAAC,CAAA;;;;;;;CACrD,CAAC,CAAA;;AAEF,2BAAK,qBAAqB,EAAE,oBAAgB,CAAC;MACrC,MAAM,EAOR,MAAM,EASN,OAAO,EAgBP,EAAE,EAQF,MAAM;;;;AAxCJ,cAAM;AACE,mBADR,MAAM,CACG,QAAQ,EAAE;kCADnB,MAAM;;AAER,uCAFE,MAAM,wEAEuB,QAAQ,iBAAa;AACpD,gBAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;WACzB;;oBAJG,MAAM;;iBAAN,MAAM;WAAS,KAAK;;AAOtB,cAAM,GAAG;AACX,mBAAS,EAAE;AACT,oBAAQ,EAAE,CAAC;AACX,gBAAI,EAAE,gBAAY;AAChB,kBAAI,CAAC,QAAQ,EAAE,CAAA;aAChB;WACF;SACF;;AAEG,eAAO,GAAG,SAAV,OAAO,CAAa,IAAI,EAAW;6CAAN,IAAI;AAAJ,gBAAI;;;AACnC,cAAI;AACF,mBAAO,IAAI,kBAAI,IAAI,CAAC,CAAA;WACrB,CAAC,OAAO,GAAG,EAAE;AACZ,gBAAI,GAAG,YAAY,MAAM,EAAE;AACzB,qBAAO,GAAG,CAAA;aACX,MAAM;AACL,oBAAM,GAAG,CAAA;aACV;WACF;SACF;;AACD,eAAO,CAAC,SAAS,GAAG,EAAE,CAAA;AACtB,eAAO,CAAC,SAAS,CAAC,MAAM,GAAG,YAAY;AACrC,gBAAM,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;SAChC,CAAA;;AAEG,UAAE,GAAG,mBAAQ,MAAM,EAAE,OAAO,EAAE,YAAY;AAC5C,cAAI,CAAC,IAAI,EAAE,CAAA;AACX,cAAI,CAAC,MAAM,EAAE,CAAA;AACb,cAAI,CAAC,IAAI,EAAE,CAAA;AACX,iBAAO,IAAI,CAAC,QAAQ,CAAA;SACrB,CAAC;;AAEF,SAAC,CAAC,SAAS,CAAC,aAAY,EAAE,CAAC,EAAE,EAAE,EAAE,2BAA2B,CAAC,CAAA;AACzD,cAAM,GAAG,EAAE,EAAE;;AACjB,SAAC,CAAC,EAAE,CAAC,MAAM,YAAY,MAAM,EAAE,sBAAsB,CAAC,CAAA;AACtD,SAAC,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,EAAE,wCAAwC,CAAC,CAAA;;;;;;;CACtE,CAAC,CAAA","file":"usage.js","sourcesContent":["import test from 'blue-tape'\nimport powerup from '..'\n\ntest('property overrides', async function (t) {\n  let sum = powerup({\n    params: ['...number']\n  }, (...numbers) => numbers.reduce((a, b) => a + b))\n\n  t.equal(typeof sum, 'function', 'sum should be a function')\n  t.deepEqual(sum.params, ['...number'], `sum.params should be ['...number']`)\n  t.equal(sum(5), 5, 'sum(5) should be 5')\n  t.equal(sum(0, 0.2, 0.03), 0.23, 'sum(0, 0.2, 0.03) should be 0.23')\n  t.equal(sum(1, 2, 3), 6, 'sum(1, 2, 3) should be 6')\n})\n\ntest('prototype overrides', async function (t) {\n  class GaveUp extends Error {\n    constructor (workDone) {\n      super(`Gave up after getting ${workDone} work done`)\n      this.workDone = workDone\n    }\n  }\n\n  let worker = {\n    prototype: {\n      workDone: 0,\n      work: function () {\n        this.workDone++\n      }\n    }\n  }\n\n  let quitter = function (next, ...args) {\n    try {\n      return next(...args)\n    } catch (err) {\n      if (err instanceof GaveUp) {\n        return err\n      } else {\n        throw err\n      }\n    }\n  }\n  quitter.prototype = {}\n  quitter.prototype.giveUp = function () {\n    throw new GaveUp(this.workDone)\n  }\n\n  let me = powerup(worker, quitter, function () {\n    this.work()\n    this.giveUp()\n    this.work()\n    return this.workDone\n  })\n\n  t.deepEqual(Object.keys(me), [], 'should have no properties')\n  let result = me()\n  t.ok(result instanceof GaveUp, 'should have given up')\n  t.equal(result.workDone, 1, 'should have only done one unit of work')\n})\n"]}