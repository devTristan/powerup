{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;qBAawB,MAAM;;sBAbX,QAAQ;;;;AAE3B,SAAS,IAAI,CAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAW;oCAAN,IAAI;AAAJ,QAAI;;;AAC3C,MAAI,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,CAAA;AACvB,MAAI,KAAK,KAAK,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;AAC9B,WAAO,IAAI,CAAC,IAAI,MAAA,CAAT,IAAI,GAAM,OAAO,SAAK,IAAI,EAAC,CAAA;GACnC,MAAM;AACL,WAAO,IAAI,CAAC,IAAI,MAAA,CAAT,IAAI,GAAM,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,GAAG,CAAC,CAAC,SAAK,IAAI,EAAC,CAAA;GAC/E;CACF;;IAEY,aAAa;WAAb,aAAa;0BAAb,aAAa;;;;;;;YAAb,aAAa;;SAAb,aAAa;GAAS,KAAK;;QAA3B,aAAa,GAAb,aAAa;;AAEX,SAAS,MAAM,GAAe;qCAAV,QAAQ;AAAR,YAAQ;;;AACzC,sBAAO,QAAQ,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,wCAAwC,CAAC,CAAA;;AAE7E,MAAI,KAAK,GAAG,EAAE,CAAA;AACd,MAAI,SAAS,GAAG,EAAE,CAAA;;AAElB,MAAI,MAAM,GAAG,SAAT,MAAM,GAAsB;uCAAN,IAAI;AAAJ,UAAI;;;AAC5B,QAAI,OAAO,GAAG,eAAc,EAAE,EAAE,SAAS,CAAC,CAAA;AAC1C,WAAO,IAAI,mBAAC,OAAO,EAAE,KAAK,EAAE,CAAC,SAAK,IAAI,EAAC,CAAA;GACxC,CAAA;;AAED,UAAQ,CAAC,OAAO,CAAC,UAAC,OAAO,EAAE,CAAC,EAAK;AAC/B,QAAI,IAAI,GAAG,OAAO,OAAO,CAAA;;AAEzB,QAAI,CAAC,KAAK,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;AAC7B,UAAI,IAAI,KAAK,UAAU,EAAE;AACvB,cAAM,IAAI,aAAa,CAAC,kCAAkC,CAAC,CAAA;OAC5D;KACF,MAAM;AACL,UAAI,IAAI,KAAK,UAAU,IAAI,IAAI,KAAK,QAAQ,EAAE;AAC5C,cAAM,IAAI,aAAa,eAAa,CAAC,sCAAmC,CAAA;OACzE;KACF;;AAED,QAAI,IAAI,KAAK,UAAU,EAAE;AACvB,WAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;KACpB;;AAED,QAAI,OAAO,OAAO,CAAC,SAAS,KAAK,QAAQ,EAAE;AACzC,qBAAc,SAAS,EAAE,OAAO,CAAC,SAAS,CAAC,CAAA;KAC5C;;AAED,iBAAY,OAAO,CAAC,CACjB,MAAM,CAAC,UAAA,GAAG;aAAI,GAAG,KAAK,WAAW;KAAA,CAAC,CAClC,OAAO,CAAC,UAAA,GAAG;aAAI,MAAM,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC;KAAA,CAAC,CAAA;GAC9C,CAAC,CAAA;;AAEF,SAAO,MAAM,CAAA;CACd","file":"index.js","sourcesContent":["import assert from 'assert'\n\nfunction next (context, calls, index, ...args) {\n  let item = calls[index]\n  if (index === calls.length - 1) {\n    return item.call(context, ...args)\n  } else {\n    return item.call(context, next.bind(null, context, calls, index + 1), ...args)\n  }\n}\n\nexport class ArgumentError extends Error {}\n\nexport default function create (...powerups) {\n  assert.notEqual(powerups.length, 0, 'you must provide at least one argument')\n\n  let calls = []\n  let prototype = {}\n\n  let runner = function (...args) {\n    let context = Object.assign({}, prototype)\n    return next(context, calls, 0, ...args)\n  }\n\n  powerups.forEach((powerup, i) => {\n    let type = typeof powerup\n\n    if (i === powerups.length - 1) {\n      if (type !== 'function') {\n        throw new ArgumentError('last argument must be a function')\n      }\n    } else {\n      if (type !== 'function' && type !== 'object') {\n        throw new ArgumentError(`argument ${i} must be a function or an object`)\n      }\n    }\n\n    if (type === 'function') {\n      calls.push(powerup)\n    }\n\n    if (typeof powerup.prototype === 'object') {\n      Object.assign(prototype, powerup.prototype)\n    }\n\n    Object.keys(powerup)\n      .filter(key => key !== 'prototype')\n      .forEach(key => runner[key] = powerup[key])\n  })\n\n  return runner\n}\n"]}